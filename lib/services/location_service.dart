import 'dart:async';
import 'package:flutter/foundation.dart';
import 'package:geolocator/geolocator.dart';
import 'package:supabase_flutter/supabase_flutter.dart';

class LocationService {
  static final LocationService _instance = LocationService._internal();
  factory LocationService() => _instance;
  LocationService._internal();

  final SupabaseClient _supabase = Supabase.instance.client;
  Timer? _locationTimer;
  bool _isTracking = false;
  

  Position? _lastPosition;
  

  static const int _updateIntervalSeconds = 30; 
  static const LocationAccuracy _desiredAccuracy = LocationAccuracy.high;


  Future<bool> initialize() async {
    try {
      print('üîç Verificando servicios de ubicaci√≥n...');
      bool serviceEnabled = await Geolocator.isLocationServiceEnabled();
      if (!serviceEnabled) {
        print('‚ùå Los servicios de ubicaci√≥n est√°n deshabilitados');
        return false;
      }
      print('‚úÖ Servicios de ubicaci√≥n habilitados');

      print('üîç Verificando permisos de ubicaci√≥n...');
      LocationPermission permission = await Geolocator.checkPermission();
      print('üìã Permiso actual: $permission');
      
      if (permission == LocationPermission.denied) {
        print('üîê Solicitando permisos de ubicaci√≥n...');
        permission = await Geolocator.requestPermission();
        print('üìã Nuevo permiso: $permission');
        
        if (permission == LocationPermission.denied) {
          print('‚ùå Permisos de ubicaci√≥n denegados por el usuario');
          return false;
        }
      }

      if (permission == LocationPermission.deniedForever) {
        print('‚ùå Permisos de ubicaci√≥n denegados permanentemente');
        return false;
      }

      print('‚úÖ LocationService inicializado correctamente con permiso: $permission');
      return true;
    } catch (e) {
      print('üí• Error inicializando LocationService: $e');
      return false;
    }
  }


  Future<void> startLocationTracking() async {
    if (_isTracking) {
      print('‚ö†Ô∏è LocationService ya est√° ejecut√°ndose');
      return;
    }

    print('üöÄ Iniciando LocationService...');
    bool initialized = await initialize();
    if (!initialized) {
      print('‚ùå No se pudo inicializar LocationService');
      return;
    }

    _isTracking = true;
    

    print('üìç Obteniendo ubicaci√≥n inicial...');
    await _updateLocationPeriodic();
    

    _locationTimer = Timer.periodic(
      Duration(seconds: _updateIntervalSeconds), 
      (timer) {
        if (_isTracking) {
          print('‚è∞ Timer activado - Actualizando ubicaci√≥n autom√°ticamente');
          _updateLocationPeriodic();
        } else {
          print('‚è∞ Timer cancelado - LocationService detenido');
          timer.cancel();
        }
      }
    );

    print('‚úÖ LocationService iniciado correctamente - Actualizaciones cada ${_updateIntervalSeconds}s');
  }

  Future<void> _updateLocationPeriodic() async {
    if (!_isTracking) {
      print('‚ö†Ô∏è LocationService no est√° activo, saltando actualizaci√≥n');
      return;
    }

    try {
      print('üéØ Obteniendo nueva posici√≥n GPS...');
      Position position = await Geolocator.getCurrentPosition(
        desiredAccuracy: _desiredAccuracy,
        timeLimit: Duration(seconds: 10), 
      );

      print('üìç GPS obtenido: ${position.latitude}, ${position.longitude} (¬±${position.accuracy}m)');
      await _processNewPosition(position);
    } catch (e) {
      print('‚ùå Error obteniendo posici√≥n GPS: $e');
      try {
        print('üîÑ Reintentando con menor precisi√≥n...');
        Position fallbackPosition = await Geolocator.getCurrentPosition(
          desiredAccuracy: LocationAccuracy.low,
          timeLimit: Duration(seconds: 5),
        );
        print('üìç GPS fallback obtenido: ${fallbackPosition.latitude}, ${fallbackPosition.longitude}');
        await _processNewPosition(fallbackPosition);
      } catch (fallbackError) {
        print('üí• Error total obteniendo GPS: $fallbackError');
      }
    }
  }


  Future<void> _processNewPosition(Position position) async {
    print('üîÑ Procesando nueva posici√≥n...');
    

    await _savePositionToDatabase(position);
    _lastPosition = position;
    
    print('‚úÖ Posici√≥n procesada y guardada exitosamente');
  }

  Future<void> _savePositionToDatabase(Position position) async {
    try {
      final user = _supabase.auth.currentUser;
      if (user == null) {
        print('‚ùå No hay usuario autenticado para guardar ubicaci√≥n');
        return;
      }

      final now = DateTime.now().toIso8601String();

      print('üíæ === GUARDANDO UBICACI√ìN ===');
      print('üë§ Usuario: ${user.id}');
      print('üìç Lat: ${position.latitude}');
      print('üìç Lng: ${position.longitude}');
      print('‚è∞ Tiempo: $now');

      try {
        print('üéØ Intentando UPSERT en user_locations...');
        
        final result = await _supabase.from('user_locations').upsert({
          'user_id': user.id,
          'latitude': position.latitude,
          'longitude': position.longitude,
          'accuracy': position.accuracy,
          'heading': position.heading,
          'speed': position.speed,
          'is_online': true,
          'last_seen': now,
          'updated_at': now,
        });
        
        print('‚úÖ √âXITO: Guardado en user_locations con UPSERT');
        print('üìã Resultado: $result');
        
      } catch (upsertError) {
        print('‚ùå UPSERT fall√≥: $upsertError');
        print('üîÑ Intentando INSERT como alternativa...');
        
        try {
          await _supabase.from('user_locations').insert({
            'user_id': user.id,
            'latitude': position.latitude,
            'longitude': position.longitude,
            'accuracy': position.accuracy,
            'heading': position.heading,
            'speed': position.speed,
            'is_online': true,
            'last_seen': now,
            'updated_at': now,
          });
          print('‚úÖ RECUPERADO: INSERT exitoso en user_locations');
          
        } catch (insertError) {
          print('üí• FALLO TOTAL: INSERT tambi√©n fall√≥: $insertError');
          
          try {
            final updateResult = await _supabase
                .from('user_locations')
                .update({
                  'latitude': position.latitude,
                  'longitude': position.longitude,
                  'accuracy': position.accuracy,
                  'heading': position.heading,
                  'speed': position.speed,
                  'is_online': true,
                  'last_seen': now,
                  'updated_at': now,
                })
                .eq('user_id', user.id);
                
            print('‚úÖ √öLTIMO RECURSO: UPDATE exitoso: $updateResult');
            
          } catch (updateError) {
            print('ÔøΩ ERROR CR√çTICO: Ning√∫n m√©todo funcion√≥: $updateError');
          }
        }
      }

      try {
        await _supabase.from('user_profiles').upsert({
          'id': user.id,
          'email': user.email,
          'username': user.email?.split('@')[0] ?? 'Usuario',
          'is_online': true,
          'updated_at': now,
        });
        print('‚úÖ Perfil actualizado como ACTIVO');
      } catch (profileError) {
        print('‚ö†Ô∏è Error actualizando perfil (no cr√≠tico): $profileError');
      }

      print('üíæ === FIN GUARDADO UBICACI√ìN ===');
      
    } catch (e) {
      print('üí• ERROR GENERAL en _savePositionToDatabase: $e');
    }
  }

  Future<void> stopLocationTracking() async {
    _isTracking = false;
    _locationTimer?.cancel();
    _locationTimer = null;
    
    if (kDebugMode) {
      print('Seguimiento de ubicaci√≥n detenido');
    }
  }

  Future<Position?> getCurrentPosition() async {
    try {
      print('üéØ Iniciando getCurrentPosition...');
      
      bool initialized = await initialize();
      if (!initialized) {
        print('‚ùå No se pudo inicializar LocationService');
        return null;
      }

      print('üîç LocationService inicializado, obteniendo posici√≥n...');

      try {
        print('üì± Intentando obtener √∫ltima posici√≥n conocida...');
        Position? lastKnown = await Geolocator.getLastKnownPosition();
        if (lastKnown != null) {
          DateTime now = DateTime.now();
          Duration timeDiff = now.difference(lastKnown.timestamp);
          
          print('‚è∞ √öltima posici√≥n: ${timeDiff.inSeconds} segundos de antig√ºedad');
          
          if (timeDiff.inMinutes < 2) {
            print('‚úÖ Usando √∫ltima posici√≥n conocida: ${lastKnown.latitude}, ${lastKnown.longitude}');
            return lastKnown;
          } else {
            print('‚ö†Ô∏è √öltima posici√≥n muy antigua (${timeDiff.inMinutes} min), obteniendo nueva...');
          }
        } else {
          print('‚ö†Ô∏è No hay √∫ltima posici√≥n conocida disponible');
        }
      } catch (e) {
        print('‚ö†Ô∏è Error obteniendo √∫ltima posici√≥n conocida: $e');
      }

      List<LocationAccuracy> accuracyLevels = [
        LocationAccuracy.medium,   
        LocationAccuracy.low,       
        LocationAccuracy.lowest,   
      ];

      for (int i = 0; i < accuracyLevels.length; i++) {
        LocationAccuracy accuracy = accuracyLevels[i];
        int timeoutSeconds = 5 + (i * 5); 
        
        try {
          print('üéØ Intento ${i + 1}/3 - Precisi√≥n: $accuracy, Timeout: ${timeoutSeconds}s');
          
          Position position = await Geolocator.getCurrentPosition(
            desiredAccuracy: accuracy,
            timeLimit: Duration(seconds: timeoutSeconds),
          );
          
          print('‚úÖ ¬°Posici√≥n obtenida exitosamente!');
          print('üìç Coordenadas: ${position.latitude}, ${position.longitude}');
          print('üéØ Precisi√≥n: ${position.accuracy}m');
          print('‚è∞ Timestamp: ${position.timestamp}');
          
          return position;
          
        } catch (e) {
          print('‚ùå Intento ${i + 1} fall√≥ con $accuracy: $e');
          if (i == accuracyLevels.length - 1) {
            print('üí• Todos los intentos de obtener posici√≥n fallaron');
          } else {
            print('üîÑ Intentando con menor precisi√≥n...');
          }
        }
      }

      print('‚ùå No se pudo obtener posici√≥n GPS con ning√∫n m√©todo');
      return null;
      
    } catch (e) {
      print('üí• Error general en getCurrentPosition: $e');
      return null;
    }
  }

  void dispose() {
    stopLocationTracking();
  }

  bool get isTracking => _isTracking;
  Position? get lastKnownPosition => _lastPosition;
}
